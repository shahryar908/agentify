'use client'\n\nimport React, { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '../components/ui/button'\nimport { Card } from '../components/ui/card'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs'\nimport { Input } from '../components/ui/input'\nimport { Label } from '../components/ui/label'\nimport { useAuth } from '../contexts/auth-context'\nimport { ErrorRecovery } from '../components/error-recovery'\nimport { Eye, EyeOff, Loader2, LogIn, UserPlus, Bot, Shield } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function AuthPage() {\n  const router = useRouter()\n  const { login, register, isLoading } = useAuth()\n  \n  // Login state\n  const [loginData, setLoginData] = useState({\n    username: '',\n    password: ''\n  })\n  \n  // Register state\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    full_name: '',\n    password: '',\n    confirmPassword: ''\n  })\n  \n  const [showPassword, setShowPassword] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [validationErrors, setValidationErrors] = useState<string[]>([])\n\n  const validatePassword = (password: string): string[] => {\n    const errors = []\n    if (password.length < 8) errors.push('Password must be at least 8 characters long')\n    if (!/[A-Z]/.test(password)) errors.push('Password must contain at least one uppercase letter')\n    if (!/[a-z]/.test(password)) errors.push('Password must contain at least one lowercase letter')\n    if (!/\\d/.test(password)) errors.push('Password must contain at least one digit')\n    return errors\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setIsSubmitting(true)\n    \n    try {\n      await login(loginData.username, loginData.password)\n      router.push('/chat')\n    } catch (err) {\n      setError(err as Error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setValidationErrors([])\n    \n    // Client-side validation\n    const passwordErrors = validatePassword(registerData.password)\n    if (passwordErrors.length > 0) {\n      setValidationErrors(passwordErrors)\n      return\n    }\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      setValidationErrors(['Passwords do not match'])\n      return\n    }\n    \n    setIsSubmitting(true)\n    \n    try {\n      await register({\n        email: registerData.email,\n        username: registerData.username,\n        password: registerData.password,\n        full_name: registerData.full_name || undefined\n      })\n      router.push('/chat')\n    } catch (err) {\n      setError(err as Error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20 flex items-center justify-center p-4\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 bg-grid-white/[0.02] bg-[size:60px_60px]\" />\n      <div className=\"absolute top-0 left-1/2 -translate-x-1/2 w-[800px] h-[400px] bg-gradient-to-r from-primary/10 via-purple-500/10 to-cyan-500/10 rounded-full blur-3xl opacity-30\" />\n      \n      <div className=\"relative w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-primary to-purple-500 rounded-2xl mb-4\">\n            <Bot className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold tracking-tight mb-2\">AI Agents Platform</h1>\n          <p className=\"text-muted-foreground\">Secure access to your AI agents</p>\n        </div>\n\n        {/* Auth Card */}\n        <Card className=\"p-6 bg-card/50 backdrop-blur-sm border border-border/50 shadow-xl\">\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n            </TabsList>\n            \n            {/* Error Display */}\n            {error && (\n              <div className=\"mb-6\">\n                <ErrorRecovery \n                  error={error}\n                  onRetry={() => setError(null)}\n                  className=\"mb-0\"\n                />\n              </div>\n            )}\n            \n            {/* Validation Errors */}\n            {validationErrors.length > 0 && (\n              <div className=\"mb-6 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded\">\n                <ul className=\"text-sm text-red-600 dark:text-red-400 space-y-1\">\n                  {validationErrors.map((error, index) => (\n                    <li key={index} className=\"flex items-center gap-2\">\n                      <div className=\"w-1 h-1 bg-red-500 rounded-full\" />\n                      {error}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            \n            {/* Login Tab */}\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-username\">Username or Email</Label>\n                  <Input\n                    id=\"login-username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username or email\"\n                    value={loginData.username}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, username: e.target.value }))}\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"login-password\"\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder=\"Enter your password\"\n                      value={loginData.password}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      disabled={isSubmitting}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-primary to-purple-500 hover:from-primary/90 hover:to-purple-500/90\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Signing In...\n                    </>\n                  ) : (\n                    <>\n                      <LogIn className=\"h-4 w-4 mr-2\" />\n                      Sign In\n                    </>\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            {/* Register Tab */}\n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-email\">Email Address</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={registerData.email}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, email: e.target.value }))}\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-username\">Username</Label>\n                  <Input\n                    id=\"register-username\"\n                    type=\"text\"\n                    placeholder=\"Choose a username\"\n                    value={registerData.username}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, username: e.target.value }))}\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-name\">Full Name (Optional)</Label>\n                  <Input\n                    id=\"register-name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={registerData.full_name}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, full_name: e.target.value }))}\n                    disabled={isSubmitting}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"register-password\"\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder=\"Create a strong password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      disabled={isSubmitting}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                  <Input\n                    id=\"register-confirm-password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Confirm your password\"\n                    value={registerData.confirmPassword}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Creating Account...\n                    </>\n                  ) : (\n                    <>\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Create Account\n                    </>\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </Card>\n        \n        {/* Footer */}\n        <div className=\"text-center mt-6 text-sm text-muted-foreground\">\n          <div className=\"flex items-center justify-center gap-1 mb-2\">\n            <Shield className=\"h-4 w-4\" />\n            <span>Secured with authentication</span>\n          </div>\n          <div>\n            New to AI Agents?{' '}\n            <Link href=\"/\" className=\"text-primary hover:underline\">\n              Learn more about the platform\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}