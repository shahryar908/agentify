'use client'\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { apiClient, UserResponse, ApiError } from '../lib/api'\n\ninterface AuthContextType {\n  user: UserResponse | null\n  isLoading: boolean\n  isAuthenticated: boolean\n  login: (username: string, password: string) => Promise<void>\n  logout: () => void\n  register: (userData: {\n    email: string\n    username: string\n    password: string\n    full_name?: string\n  }) => Promise<void>\n  refreshUser: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: ReactNode\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserResponse | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const refreshUser = async () => {\n    try {\n      const token = localStorage.getItem('auth_token')\n      if (!token) {\n        setUser(null)\n        setIsLoading(false)\n        return\n      }\n\n      const userData = await apiClient.getCurrentUser()\n      setUser(userData)\n    } catch (error) {\n      console.error('Failed to refresh user:', error)\n      // Clear invalid token\n      localStorage.removeItem('auth_token')\n      setUser(null)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const login = async (username: string, password: string) => {\n    setIsLoading(true)\n    try {\n      const tokenData = await apiClient.login({ username, password })\n      \n      // Get user data after successful login\n      const userData = await apiClient.getCurrentUser()\n      setUser(userData)\n      \n      // Store additional user data in localStorage for persistence\n      localStorage.setItem('user_data', JSON.stringify(userData))\n    } catch (error) {\n      console.error('Login failed:', error)\n      throw error\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const register = async (userData: {\n    email: string\n    username: string\n    password: string\n    full_name?: string\n  }) => {\n    setIsLoading(true)\n    try {\n      await apiClient.register(userData)\n      \n      // Auto-login after successful registration\n      await login(userData.username, userData.password)\n    } catch (error) {\n      console.error('Registration failed:', error)\n      throw error\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const logout = () => {\n    apiClient.logout()\n    setUser(null)\n    localStorage.removeItem('user_data')\n    \n    // Redirect to login page or refresh\n    window.location.reload()\n  }\n\n  useEffect(() => {\n    // Check for existing authentication on mount\n    const checkAuth = async () => {\n      const token = localStorage.getItem('auth_token')\n      const savedUserData = localStorage.getItem('user_data')\n      \n      if (token && savedUserData) {\n        try {\n          // Try to parse saved user data first for faster UX\n          const userData = JSON.parse(savedUserData)\n          setUser(userData)\n          setIsLoading(false)\n          \n          // Then refresh in background to ensure it's current\n          refreshUser()\n        } catch (error) {\n          // If parsing fails, refresh normally\n          refreshUser()\n        }\n      } else {\n        setIsLoading(false)\n      }\n    }\n\n    checkAuth()\n  }, [])\n\n  const value = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    logout,\n    register,\n    refreshUser\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\n// Hook for optional authentication (doesn't throw if not authenticated)\nexport const useOptionalAuth = () => {\n  const context = useContext(AuthContext)\n  return context || {\n    user: null,\n    isLoading: false,\n    isAuthenticated: false,\n    login: async () => { throw new Error('Auth not available') },\n    logout: () => {},\n    register: async () => { throw new Error('Auth not available') },\n    refreshUser: async () => {}\n  }\n}\n\n// Protected route wrapper\nexport const ProtectedRoute: React.FC<{ children: ReactNode; fallback?: ReactNode }> = ({ \n  children, \n  fallback \n}) => {\n  const { isAuthenticated, isLoading } = useAuth()\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return fallback || (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Authentication Required</h2>\n          <p className=\"text-muted-foreground mb-4\">Please log in to access this page.</p>\n          <button \n            onClick={() => window.location.href = '/login'}\n            className=\"bg-primary text-primary-foreground px-4 py-2 rounded\"\n          >\n            Go to Login\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return <>{children}</>\n}