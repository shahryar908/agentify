"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./app/lib/api.ts":
/*!************************!*\
  !*** ./app/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: () => (/* binding */ apiClient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// API configuration for backend integration\nconst API_BASE_URL = \"http://localhost:8002\" || 0;\n// API client with error handling\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            },\n            timeout: 30000,\n            ...options\n        };\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 30000);\n            const response = await fetch(url, {\n                ...config,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                let errorMessage = \"HTTP error! status: \".concat(response.status);\n                try {\n                    const errorData = await response.json();\n                    errorMessage = errorData.detail || errorData.message || errorMessage;\n                } catch (e) {\n                // If we can't parse error response, use default message\n                }\n                throw new Error(errorMessage);\n            }\n            const contentType = response.headers.get('content-type');\n            if (contentType && contentType.includes('application/json')) {\n                return await response.json();\n            } else {\n                // Handle non-JSON responses\n                return await response.text();\n            }\n        } catch (error) {\n            if (error instanceof Error && error.name === 'AbortError') {\n                throw new Error('Request timeout - please check your connection and try again');\n            }\n            console.error(\"API request failed: \".concat(endpoint), error);\n            throw error;\n        }\n    }\n    // Agent endpoints\n    async getAgents() {\n        return this.request('/agents');\n    }\n    async createAgent(data) {\n        return this.request('/agents', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    }\n    async getAgent(id) {\n        return this.request(\"/agents/\".concat(id));\n    }\n    async deleteAgent(id) {\n        return this.request(\"/agents/\".concat(id), {\n            method: 'DELETE'\n        });\n    }\n    async chatWithAgent(id, message) {\n        return this.request(\"/agents/\".concat(id, \"/chat\"), {\n            method: 'POST',\n            body: JSON.stringify({\n                message\n            })\n        });\n    }\n    async clearChatHistory(id) {\n        return this.request(\"/agents/\".concat(id, \"/clear-history\"), {\n            method: 'POST'\n        });\n    }\n    async getAgentTools(id) {\n        return this.request(\"/agents/\".concat(id, \"/tools\"));\n    }\n    // Demo endpoints\n    async createSampleAgent() {\n        return this.request('/demo/create-sample-agent', {\n            method: 'POST'\n        });\n    }\n    async createIntelligentAgent() {\n        return this.request('/demo/create-intelligent-agent', {\n            method: 'POST'\n        });\n    }\n    async createAutonomousAgent() {\n        return this.request('/demo/create-autonomous-agent', {\n            method: 'POST'\n        });\n    }\n    // Blog endpoints\n    async getBlogs(params) {\n        const searchParams = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined && value !== null) {\n                    searchParams.append(key, String(value));\n                }\n            });\n        }\n        const query = searchParams.toString();\n        return this.request(\"/api/blog/posts\".concat(query ? \"?\".concat(query) : ''));\n    }\n    async getBlogBySlug(slug) {\n        return this.request(\"/api/blog/posts/\".concat(slug));\n    }\n    async createBlog(data) {\n        return this.request('/api/blog/posts', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    }\n    async updateBlog(id, data) {\n        return this.request(\"/api/blog/posts/\".concat(id), {\n            method: 'PUT',\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteBlog(id) {\n        return this.request(\"/api/blog/posts/\".concat(id), {\n            method: 'DELETE'\n        });\n    }\n    async likeBlog(id) {\n        return this.request(\"/api/blog/posts/\".concat(id, \"/like\"), {\n            method: 'POST'\n        });\n    }\n    async getCategories() {\n        return this.request('/api/blog/categories');\n    }\n    async getTags() {\n        return this.request('/api/blog/tags');\n    }\n    async getBlogStats() {\n        return this.request('/api/blog/stats');\n    }\n    async searchBlogs(query) {\n        let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, pageSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n        return this.request(\"/api/blog/search?q=\".concat(encodeURIComponent(query), \"&page=\").concat(page, \"&pageSize=\").concat(pageSize));\n    }\n    constructor(baseUrl = API_BASE_URL){\n        this.baseUrl = baseUrl;\n    }\n}\n// Export singleton instance\nconst apiClient = new ApiClient();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/api.ts\n"));

/***/ })

});