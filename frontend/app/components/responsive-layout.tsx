'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { cn } from '../lib/utils'\n\ninterface ResponsiveLayoutProps {\n  children: React.ReactNode\n  sidebar?: React.ReactNode\n  header?: React.ReactNode\n  className?: string\n}\n\nexport const ResponsiveLayout: React.FC<ResponsiveLayoutProps> = ({\n  children,\n  sidebar,\n  header,\n  className\n}) => {\n  const [isMobile, setIsMobile] = useState(false)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768)\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false)\n      }\n    }\n\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    return () => window.removeEventListener('resize', checkMobile)\n  }, [])\n\n  return (\n    <div className={cn(\"flex h-screen bg-background\", className)}>\n      {/* Mobile Sidebar Overlay */}\n      {isMobile && sidebarOpen && (\n        <div \n          className=\"fixed inset-0 z-40 bg-black/50\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n      \n      {/* Sidebar */}\n      {sidebar && (\n        <aside className={cn(\n          \"bg-card border-r border-border transition-transform duration-300 z-50\",\n          isMobile ? (\n            sidebarOpen \n              ? \"fixed inset-y-0 left-0 w-80 transform translate-x-0\" \n              : \"fixed inset-y-0 left-0 w-80 transform -translate-x-full\"\n          ) : \"relative w-64 flex-shrink-0\"\n        )}>\n          <div className=\"h-full overflow-y-auto\">\n            {sidebar}\n          </div>\n        </aside>\n      )}\n      \n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Header */}\n        {header && (\n          <header className=\"border-b border-border bg-background/95 backdrop-blur-sm\">\n            {header}\n          </header>\n        )}\n        \n        {/* Content */}\n        <main className=\"flex-1 overflow-hidden\">\n          {children}\n        </main>\n      </div>\n      \n      {/* Mobile Menu Toggle */}\n      {isMobile && sidebar && (\n        <button\n          onClick={() => setSidebarOpen(!sidebarOpen)}\n          className=\"fixed bottom-4 left-4 z-50 p-3 bg-primary text-primary-foreground rounded-full shadow-lg md:hidden\"\n        >\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n          </svg>\n        </button>\n      )}\n    </div>\n  )\n}\n\n// Breakpoint hooks\nexport const useBreakpoint = () => {\n  const [breakpoint, setBreakpoint] = useState('lg')\n  \n  useEffect(() => {\n    const updateBreakpoint = () => {\n      const width = window.innerWidth\n      if (width < 640) setBreakpoint('xs')\n      else if (width < 768) setBreakpoint('sm')\n      else if (width < 1024) setBreakpoint('md')\n      else if (width < 1280) setBreakpoint('lg')\n      else setBreakpoint('xl')\n    }\n    \n    updateBreakpoint()\n    window.addEventListener('resize', updateBreakpoint)\n    return () => window.removeEventListener('resize', updateBreakpoint)\n  }, [])\n  \n  return {\n    breakpoint,\n    isMobile: breakpoint === 'xs' || breakpoint === 'sm',\n    isTablet: breakpoint === 'md',\n    isDesktop: breakpoint === 'lg' || breakpoint === 'xl',\n    xs: breakpoint === 'xs',\n    sm: breakpoint === 'sm',\n    md: breakpoint === 'md',\n    lg: breakpoint === 'lg',\n    xl: breakpoint === 'xl'\n  }\n}\n\n// Responsive text component\ninterface ResponsiveTextProps {\n  children: React.ReactNode\n  size?: {\n    xs?: string\n    sm?: string\n    md?: string\n    lg?: string\n    xl?: string\n  }\n  className?: string\n}\n\nexport const ResponsiveText: React.FC<ResponsiveTextProps> = ({\n  children,\n  size = { xs: 'text-sm', sm: 'text-base', md: 'text-lg', lg: 'text-xl', xl: 'text-2xl' },\n  className\n}) => {\n  const { breakpoint } = useBreakpoint()\n  const textSize = size[breakpoint as keyof typeof size] || size.lg\n  \n  return (\n    <span className={cn(textSize, className)}>\n      {children}\n    </span>\n  )\n}"